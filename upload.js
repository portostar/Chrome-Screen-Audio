// Generated by CoffeeScript 1.10.0
(function() {
  var Upload, fs, path, util, winston;

  fs = require("fs");

  winston = require("winston");

  path = require("path");

  util = require("util");

  Upload = (function() {
    function Upload(config, fileId) {
      this.fileId = fileId;
      this.filePath = path.join(config.files, fileId);
      this.infoPath = path.resolve(this.filePath + ".json");
      this.info = null;
    }

    Upload.prototype.create = function(finalLength) {
      var error, error1, error2, info;
      try {
        fs.closeSync(fs.openSync(this.filePath, 'w'));
      } catch (error1) {
        error = error1;
        winston.error(util.inspect(error));
        return {
          error: [500, "Create Failed"]
        };
      }
      try {
        info = {
          finalLength: finalLength,
          state: "created",
          createdOn: Date.now(),
          offset: 0
        };
        fs.writeFileSync(this.infoPath, JSON.stringify(info));
        this.info = info;
      } catch (error2) {
        error = error2;
        winston.error(util.inspect(error));
        return {
          error: [500, "Create Failed - Metadata"]
        };
      }
      return {
        info: this.info
      };
    };

    Upload.prototype.save = function() {
      var error, error1;
      try {
        fs.writeFileSync(this.infoPath, JSON.stringify(this.info));
      } catch (error1) {
        error = error1;
        winston.error(util.inspect(error));
        return {
          error: [500, "Save Failed - Metadata"]
        };
      }
      return {
        info: this.info
      };
    };

    Upload.prototype.load = function() {
      var e, error, error1, error2, stat;
      if (!fs.existsSync(this.filePath)) {
        return {
          error: [404, "File Not Found"]
        };
      }
      try {
        this.info = require(this.infoPath);
      } catch (error1) {
        error = error1;
        winston.error(util.inspect(error));
        return {
          error: [404, "Not Found - Metadata"]
        };
      }
      try {
        stat = fs.statSync(this.filePath);
        this.info.offset = stat.size;
      } catch (error2) {
        e = error2;
        winston.error("file error " + fileId + " " + (util.inspect(e)));
        return {
          error: [500, "File Load Error"]
        };
      }
      return {
        info: this.info
      };
    };

    Upload.prototype.stream = function() {
      return fs.createReadStream(this.filePath);
    };

    return Upload;

  })();

  exports.Upload = function(config, fileId) {
    return new Upload(config, fileId);
  };

}).call(this);
