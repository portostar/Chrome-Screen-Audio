// Muaz Khan     - www.MuazKhan.com
// MIT License   - www.WebRTC-Experiment.com/licence
// Experiments   - github.com/muaz-khan/WebRTC-Experiment
var config = require('./config'),
    fs = require('fs'),
    sys = require('sys'),
    exec = require('child_process').exec;/*,
	s3 = require('s3');*/

var lame = require('lame');
var wav = require('wav');

function home(response, postData) {
    response.writeHead(200, {
        'Content-Type': 'text/html'
    });
    response.end(fs.readFileSync('./static/index.html'));
}

// this function uploads files

function upload(response, postData) {
    var files = JSON.parse(postData);

    // writing audio file to disk
    _upload(response, files.audio);

    
}

function _upload(response, file) {
    fileRootName = file.name.split('.').shift();
	
        var fileExtension = file.name.split('.').pop(),
        filePathBase = config.upload_dir + '/',
        fileRootNameWithBase = filePathBase + fileRootName,
        filePath = fileRootNameWithBase + '.' + fileExtension,
			
        fileID = 2;

    while (fs.existsSync(filePath)) {
        filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension;
        fileID += 1;
    }

    file.contents = file.contents.split(',').pop();

    fileBuffer = new Buffer(file.contents, "base64");

   
		fs.writeFile(filePath, fileBuffer, function() {
			
			// first figure out if we're encoding from a filename, or from stdin

				 console.log("Reading wav from "+filePath);
				  input = fs.createReadStream(filePath);
				  var outfile = filePath.replace("wav", "mp3");
				  output = fs.createWriteStream(outfile);
// MP3 Conversion start
				// start reading the WAV file from the input
				reader = new wav.Reader();

				// we have to wait for the "format" event before we can start encoding
				reader.on('format', onFormat);

				
// MP3 Conversion end
					reader.on('end', function() {
						// Amazon S3 Upload
   if (config.s3_enabled) {
						
							var knox = require('knox'),
							client = knox.createClient(config.s3);
							console.log("outfile:"+outfile);
						var buf = fs.readFileSync(outfile); // , function(err, buf){
					console.log("buf:"+typeof(buf));
							console.log("buf.length:"+buf.length);
							
							  var req = client.put(file.name.replace("wav", "mp3"), {
								  'Content-Length': buf.length
								, 'Content-Type': 'audio/mpeg',
								 'x-amz-acl': 'public-read' 
							  });
							  req.on('response', function(res){
								if (200 == res.statusCode) {
								  console.log('saved to %s', req.url);
								  response.statusCode = 200;
								  response.setHeader("Access-Control-Allow-Origin", "*");
								  response.writeHead(200, {
									'Content-Type': 'application/json',

								  });
								 response.end(outfile);
								 // fs.unlinkSync(filePath);
								 // fs.unlinkSync(outfile);
								}
							  });
					req.end(buf);

					}
});
						// and start transferring the data
				input.pipe(reader);


		});

		
	
}

function onFormat (format) {
  // encoding the wave file into an MP3 is as simple as calling pipe()
  var encoder = new lame.Encoder(format);
  reader.pipe(encoder).pipe(output);
}

function serveStatic(response, pathname, postData) {

    var extension = pathname.split('.').pop(),
        extensionTypes = {
            'js': 'application/javascript',
            'wav': 'audio/wav',
            'gif': 'image/gif',
			'mp3': 'audio/mpeg'
        };

    response.writeHead(200, {
        'Content-Type': extensionTypes[extension]
    });
	if (extensionTypes[extension] == 'audio/mpeg')
        response.end(fs.readFileSync('.' + pathname));
	else
    if (extensionTypes[extension] == 'audio/wav')
        response.end(fs.readFileSync('.' + pathname));
    else
        response.end(fs.readFileSync('./static' + pathname));
}

exports.home = home;
exports.upload = upload;
exports.serveStatic = serveStatic;
