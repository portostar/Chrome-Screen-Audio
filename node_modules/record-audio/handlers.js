// Muaz Khan     - www.MuazKhan.com
// MIT License   - www.WebRTC-Experiment.com/licence
// Experiments   - github.com/muaz-khan/WebRTC-Experiment
var config = require('./config'),
    fs = require('fs'),
    sys = require('sys'),
    exec = require('child_process').exec;/*,
	s3 = require('s3');*/

var lame = require('lame');
var wav = require('wav');

function home(response, postData) {
    response.writeHead(200, {
        'Content-Type': 'text/html'
    });
    response.end(fs.readFileSync('./static/index.html'));
}

// this function uploads files

function upload(response, postData) {
    var files = JSON.parse(postData);

    // writing audio file to disk
    _upload(response, files.audio);

    response.statusCode = 200;
	response.setHeader("Access-Control-Allow-Origin", "*");
	response.writeHead(200, {
        'Content-Type': 'application/json',

    });
    response.end(files.audio.name);
}

function _upload(response, file) {
    var fileRootName = file.name.split('.').shift(),
        fileExtension = file.name.split('.').pop(),
        filePathBase = config.upload_dir + '/',
        fileRootNameWithBase = filePathBase + fileRootName,
        filePath = fileRootNameWithBase + '.' + fileExtension,
        fileID = 2,
        fileBuffer;

    while (fs.existsSync(filePath)) {
        filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension;
        fileID += 1;
    }

    file.contents = file.contents.split(',').pop();

    fileBuffer = new Buffer(file.contents, "base64");

    if (config.s3_enabled) {

        var knox = require('knox'),
            client = knox.createClient(config.s3),
            headers = {
                'Content-Type': file.type
            };

        client.putBuffer(fileBuffer, fileRootName, headers);

    } else {
		fs.writeFile(filePath, fileBuffer, function() {
			
			// first figure out if we're encoding from a filename, or from stdin

				 console.log("Reading wav from "+filePath);
				  input = fs.createReadStream(filePath);
				  var outfile = filePath.replace("wav", "mp3");
				  output = fs.createWriteStream(outfile);

				// start reading the WAV file from the input
				reader = new wav.Reader();

				// we have to wait for the "format" event before we can start encoding
				reader.on('format', onFormat);

				// and start transferring the data
				input.pipe(reader);

						// MP3 Conversion end

						// Amazon S3 Upload

						/*var client = s3.createClient({
						  maxAsyncS3: 20,     // this is the default 
						  s3RetryCount: 3,    // this is the default 
						  s3RetryDelay: 1000, // this is the default 
						  multipartUploadThreshold: 20971520, // this is the default (20 MB) 
						  multipartUploadSize: 15728640, // this is the default (15 MB) 
						  s3Options: {
							accessKeyId: "your s3 key",
							secretAccessKey: "your s3 secret",
							// any other options are passed to new AWS.S3() 
							// See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property 
						  },
						});*/

						// Amazon S3 Upload end
		});

		// MP3 Conversion start
    }
}

function onFormat (format) {
  // encoding the wave file into an MP3 is as simple as calling pipe()
  var encoder = new lame.Encoder(format);
  reader.pipe(encoder).pipe(output);
}

function serveStatic(response, pathname, postData) {

    var extension = pathname.split('.').pop(),
        extensionTypes = {
            'js': 'application/javascript',
            'wav': 'audio/wav',
            'gif': 'image/gif',
			'mp3': 'audio/mpeg'
        };

    response.writeHead(200, {
        'Content-Type': extensionTypes[extension]
    });
	if (extensionTypes[extension] == 'audio/mpeg')
        response.end(fs.readFileSync('.' + pathname));
	else
    if (extensionTypes[extension] == 'audio/wav')
        response.end(fs.readFileSync('.' + pathname));
    else
        response.end(fs.readFileSync('./static' + pathname));
}

exports.home = home;
exports.upload = upload;
exports.serveStatic = serveStatic;
